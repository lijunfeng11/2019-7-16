1 阐述方法的概述和定义格式

	方法的概述 : 可以完成某个特定功能的代码块
	
	方法的定义格式 :
		A : 有具体返回值的方法
			
			修饰符 返回值类型 方法名(数据类型 变量名1 , 数据类型 变量名2 ...){
				方法体;
				return 返回值;
			}
			
			修饰符 : public static 
			返回值类型 : 规范返回值的类型的
			方法名 : 方便调用此方法
			参数列表 : 为方法体服务的
			方法体 : 完成特定功能的代码
			return : 1 结束方法  2 把return后面的值返回给调用此方法的位置!!!
			
			
			调用 : 1 单独调用 获取 直接调用(没有意义)	2 赋值调用(推荐的方式)  3 输出调用
			
			
			举例 ： 红烧肉
			public static 盘子 炒菜(肉 , 葱姜蒜 , 油 , 盐 , 酱油 , 糖 ...){
				1 ...
				2 ...
				3 ...
				...
				
				return 红烧肉;
			}
			
		
		B : 无具体返回值的方法(用void修饰的方法)
		
			修饰符 void 方法名(数据类型 变量名1 , 数据类型 变量名2 ...){
				方法体;
			}
			
			调用 : 1 单独调用
			

2 独立编写定义求和方法并测试的案例
	
	public class Demo{
		public static void main(String[] args){
			// 赋值调用
			int c = sum(10,20);
			
			System.out.println("两个数据和为:"+c);
		
		}
		
		public static int sum(int a , int b){
			return a + b;
		}
	}


3 阐述方法的调用流程


4 独立编写求两个数据较大值的方法并测试的案例

	public class Demo{
		public static void main(String[] args){
		
			Scanner sc = new Scanner(System.in);
			
			System.out.println("录入第一个数据:");
			int a = sc.nextInt();
			
			System.out.println("录入第二个数据:");
			int b = sc.nextInt();
			
			
			// 赋值调用
			int max = getMax(a,b);
			System.out.println(max);
		}
		
		public static int getMax(int a, int b){
			
			return a > b ? a : b;
		}
		
	}

5 独立编写比较两个数据是否相等的方法并测试的案例

	public class Demo{
		public static void main(String[] args){
		
			Scanner sc = new Scanner(System.in);
			
			System.out.println("录入第一个数据:");
			int a = sc.nextInt();
			
			System.out.println("录入第二个数据:");
			int b = sc.nextInt();
			
			boolean bb = compare(a , b );
			
			System.out.println(bb);
		}
		
		public static boolean compare(int a , int b){
		
			return a == b;
		}
		
	}

6 独立编写打印10次HelloWorld的方法并测试方法调用的案例

	public class Demo{
		public static void main(String[] args){
			// 单独调用
			printHelloWorld();
		}
		
		public static void printHelloWorld(){
		
			for(int i = 1 ; i <= 10 ; i++){		
				System.out.println("HelloWorld");
			}
		}
	}


7 独立编写打印水仙花数的方法并测试的案例
	public class Demo{
		public static void main(String[] args){
			// 单独调用
			printFlower();
		}
		
		public static void printFlower(){
			for(int i = 100 ; i < 1000 ; i++){
				int  ge = i % 10;
				int shi = i / 10 % 10;
				int bai = i / 10 / 10 % 10;
				
				if(ge*ge*ge + shi*shi*shi + bai*bai*bai == i){		
					System.out.println(i);
				}	
			}
		}
	}
	

8 独立编写打印1到n方法并测试的案例

	public class Demo{
		public static void main(String[] args){
			Scanner sc = new Scanner(System.in);
			
			System.out.println("录入第一个数据:");
			int a = sc.nextInt();
			
			// 单独调用
			printNum(a);
		}
		
		public static void printNum(int n){
			for(int i = 1 ; i <= n ; i++){
				System.out.println(i);
			}
		}
		
	}


9 阐述方法重载的概念和特点

	方法重载的概念 : 在一类中出现了方法名相同的方法
	方法重载的特点 : 1 方法名相同   2 参数列表不同(要么参数的个数不同,要么对应的参数类型不同)
	注意事项 : 方法重载与返回值类型无关
	

10 独立编写比较两个数据是否相等的方法并调用的案例

	注意 : 虚拟机重载方法, 会根据方法的参数进行区分

	public class Demo{
		public static void main(String[] args){
		
			compare(10 , 20);// 调用的是比较两个int类型数据是否相等的方法
			
			compare((byte)10 ,(byte)20);// 调用的是比较两个byte类型数据是否相等的方法
			
			compare(12.12 ,12.12);// 调用的是比较两个double类型数据是否相等的方法
			
			compare(12.12F ,12.12F);// 调用的是比较两个float类型数据是否相等的方法
		
		}
		
		// byte
		public static void compare(byte b1 , byte b2){
			System.out.println(b1 == b2);
		}
		
		// int
		public static void compare(int b1 , int b2){
			System.out.println(b1 == b2);
		}
		
		// double
		public static void compare(double b1 , double b2){
			System.out.println(b1 == b2);
		}
		
		// float
		public static void compare(float b1 , float b2){
			System.out.println(b1 == b2);
		}
		
		
	}
	
	


11 阐述基本数据类型作为参数传递的特点

	方法的参数如果是基本数据类型, 形参的改变不影响实参的值  
	原因 : 传递的是数据值
	

12 阐述引用数据类型作为参数传递的特点
	方法的参数如果是引用数据类型 , 形参的改变直接影响实参的值
	原因 : 传递的是地址值

13 独立编写遍历数组的方法并测试的案例
	public static void main(String[] args) {
		int[] arr = { 1, 2, 3, 4, 5 };
		// 单独调用
		printArr(arr); 
	}
	
	/*
	 * 两个明确 
	 * 	返回值类型 : void
	 *	参数列表 : int[] arr
	 *
	 *  格式 : [元素1, 元素2, ...元素n]
	 */
	public static void printArr(int[] arr) {
		System.out.print("[");
		for (int i = 0; i < arr.length; i++) {
			if (i == arr.length - 1) {
				System.out.println(arr[i] + "]");
			} else {
				System.out.print(arr[i] + ", ");
			}
		}
		
	}

14 独立编写获取数组最大值的方法并测试的案例
	/*
	 * 两个明确
	 * 	返回值类型 : int
	 * 	参数列表 : int[] arr
	 */
	public static int getMax(int[] arr){
		int max = arr[0];
		
		for (int i = 1; i < arr.length; i++) {
			if(arr[i] > max){
				max = arr[i];
			}
		}
		
		return max;
	}
	
	/*
	 * 两个明确
	 * 	返回值类型 : int
	 * 	参数列表 : int[] arr
	 */
	public static int getMin(int[] arr){
		int min = arr[0];
		
		for (int i = 1; i < arr.length; i++) {
			if(arr[i] < min){
				min = arr[i];
			}
		}
		
		return min;
	}
	